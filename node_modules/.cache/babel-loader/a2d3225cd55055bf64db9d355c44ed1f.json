{"ast":null,"code":"import React,{useState,useEffect,useContext,Suspense,lazy}from\"react\";import ApolloClient from\"apollo-boost\";import{gql}from\"apollo-boost\";import\"./Project.css\";import Button from\"../../components/button/Button\";import{openSource,socialMediaLinks}from\"../../portfolio\";import{StyleConsumer}from\"../../contexts/StyleContext\";import Loading from\"../../containers/loading/Loading\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function Projects(){const GithubRepoCard=/*#__PURE__*/lazy(()=>import(\"../../components/githubRepoCard/GithubRepoCard\"));const FailedLoading=()=>null;const renderLoader=()=>/*#__PURE__*/_jsx(Loading,{});const[repo,setrepo]=useState([]);const{isDark}=useContext(StyleConsumer);useEffect(()=>{getRepoData();},[]);function getRepoData(){const client=new ApolloClient({uri:\"https://api.github.com/graphql\",request:operation=>{operation.setContext({headers:{authorization:`Bearer ${openSource.githubConvertedToken}`}});}});client.query({query:gql`\n        {\n        user(login: \"${openSource.githubUserName}\") {\n          pinnedItems(first: 6, types: [REPOSITORY]) {\n            totalCount\n            edges {\n              node {\n                ... on Repository {\n                  name\n                  description\n                  forkCount\n                  stargazers {\n                    totalCount\n                  }\n                  url\n                  id\n                  diskUsage\n                  primaryLanguage {\n                    name\n                    color\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n        `}).then(result=>{setrepoFunction(result.data.user.pinnedItems.edges);console.log(result);}).catch(function(error){console.log(error);setrepoFunction(\"Error\");console.log(\"Because of this Error, nothing is shown in place of Projects section. Projects section not configured\");});}function setrepoFunction(array){setrepo(array);}if(!(typeof repo===\"string\"||repo instanceof String)){return/*#__PURE__*/_jsx(Suspense,{fallback:renderLoader(),children:/*#__PURE__*/_jsxs(\"div\",{className:\"main\",id:\"opensource\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"project-title\",children:\"Open Source Projects\"}),/*#__PURE__*/_jsx(\"div\",{className:\"repo-cards-div-main\",children:repo.map((v,i)=>{return/*#__PURE__*/_jsx(GithubRepoCard,{repo:v,isDark:isDark},v.node.id);})}),/*#__PURE__*/_jsx(Button,{text:\"More Projects\",className:\"project-button\",href:socialMediaLinks.github,newTab:true})]})});}else{return/*#__PURE__*/_jsx(FailedLoading,{});}}","map":{"version":3,"names":["React","useState","useEffect","useContext","Suspense","lazy","ApolloClient","gql","Button","openSource","socialMediaLinks","StyleConsumer","Loading","jsx","_jsx","jsxs","_jsxs","Projects","GithubRepoCard","FailedLoading","renderLoader","repo","setrepo","isDark","getRepoData","client","uri","request","operation","setContext","headers","authorization","githubConvertedToken","query","githubUserName","then","result","setrepoFunction","data","user","pinnedItems","edges","console","log","catch","error","array","String","fallback","children","className","id","map","v","i","node","text","href","github","newTab"],"sources":["/Users/shubhankar.mathur/Documents/Code/personal/iamshubhankar/src/containers/projects/Projects.js"],"sourcesContent":["import React, { useState, useEffect, useContext, Suspense, lazy } from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { gql } from \"apollo-boost\";\nimport \"./Project.css\";\nimport Button from \"../../components/button/Button\";\nimport { openSource, socialMediaLinks } from \"../../portfolio\";\nimport { StyleConsumer } from \"../../contexts/StyleContext\";\nimport Loading from \"../../containers/loading/Loading\";\nexport default function Projects() {\n  const GithubRepoCard = lazy(() =>\n    import(\"../../components/githubRepoCard/GithubRepoCard\")\n  );\n  const FailedLoading = () => null;\n  const renderLoader = () => <Loading />;\n  const [repo, setrepo] = useState([]);\n  const { isDark } = useContext(StyleConsumer);\n  useEffect(() => {\n    getRepoData();\n  }, []);\n\n  function getRepoData() {\n    const client = new ApolloClient({\n      uri: \"https://api.github.com/graphql\",\n      request: (operation) => {\n        operation.setContext({\n          headers: {\n            authorization: `Bearer ${openSource.githubConvertedToken}`,\n          },\n        });\n      },\n    });\n\n    client\n      .query({\n        query: gql`\n        {\n        user(login: \"${openSource.githubUserName}\") {\n          pinnedItems(first: 6, types: [REPOSITORY]) {\n            totalCount\n            edges {\n              node {\n                ... on Repository {\n                  name\n                  description\n                  forkCount\n                  stargazers {\n                    totalCount\n                  }\n                  url\n                  id\n                  diskUsage\n                  primaryLanguage {\n                    name\n                    color\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n        `,\n      })\n      .then((result) => {\n        setrepoFunction(result.data.user.pinnedItems.edges);\n        console.log(result);\n      })\n      .catch(function (error) {\n        console.log(error);\n        setrepoFunction(\"Error\");\n        console.log(\n          \"Because of this Error, nothing is shown in place of Projects section. Projects section not configured\"\n        );\n      });\n  }\n\n  function setrepoFunction(array) {\n    setrepo(array);\n  }\n  if (!(typeof repo === \"string\" || repo instanceof String)) {\n    return (\n      <Suspense fallback={renderLoader()}>\n        <div className=\"main\" id=\"opensource\">\n          <h1 className=\"project-title\">Open Source Projects</h1>\n          <div className=\"repo-cards-div-main\">\n            {repo.map((v, i) => {\n              return (\n                <GithubRepoCard repo={v} key={v.node.id} isDark={isDark} />\n              );\n            })}\n          </div>\n          <Button\n            text={\"More Projects\"}\n            className=\"project-button\"\n            href={socialMediaLinks.github}\n            newTab={true}\n          />\n        </div>\n      </Suspense>\n    );\n  } else {\n    return <FailedLoading />;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}